#!/bin/bash

# Este script reemplazará el contenido de tu archivo schema.prisma
# Asegúrate de estar en la raíz de tu proyecto crm-backend o ajusta la ruta.

# Directorio del schema.prisma
SCHEMA_PATH="prisma/schema.prisma"

echo "Reemplazando el contenido de $SCHEMA_PATH..."

cat << 'EOF' > "$SCHEMA_PATH"
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LeadStatus {
  Nuevo
  Seguimiento
  PorPagar
  Agendado
  Perdido
}

enum ReceptionStatus {
  Agendado
  PorAtender
  Atendido
  Reprogramado
  Cancelado
  NoAsistio
}

enum AtencionStatus {
  PorAtender
  EnSeguimiento
  SeguimientoHecho
}

enum Seller {
  Vanesa
  Liz
  Elvira
  Janela
  Keila
  Luz
  Dra_Marilia @map("Dra. Marilia")
  Dra_Sofia @map("Dra. Sofía")
  Dr_Carlos @map("Dr. Carlos")
}

enum Personal {
  Vanesa
  Elvira
  Janela
  Liz
  Keila
  Luz
  Dra_Marilia @map("Dra. Marilia")
  Dra_Sofia @map("Dra. Sofía")
  Dr_Carlos @map("Dr. Carlos")
}

enum Medico {
  Dra_Marilia @map("Dra. Marilia")
  Dra_Sofia @map("Dra. Sofía")
  Dr_Carlos @map("Dr. Carlos")
}

enum MetodoPago {
  Efectivo
  Tarjeta
  Transferencia
  Yape
  Plin
}

enum EstadoLlamada {
  Contesto
  NoContesto
  NumeroEquivocado @map("Numero equivocado")
  Ocupado
}

enum TipoComprobanteElectronico {
  Boleta
  Factura
}

enum SunatStatus {
  Aceptado
  Pendiente
  Rechazado
  ConObservaciones @map("Con Observaciones")
  Anulado
}

enum TipoComprobante {
  Factura
  Boleta
  ReciboHonorarios @map("Recibo por Honorarios")
  SinComprobante @map("Sin Comprobante")
}

enum ModoPagoEgreso {
  Efectivo
  TransferenciaBancaria @map("Transferencia Bancaria")
  TarjetaCreditoDebito @map("Tarjeta de Crédito/Débito")
  YapePlin @map("Yape/Plin")
}

enum DocumentType {
  DNI
  RUC
  Pasaporte
  CarnetExtranjeria @map("Carnet de Extranjería")
}

enum GoalUnit {
  cantidad
  porcentaje
}

enum GoalArea {
  Comercial
  Administracion @map("Administración")
  Recepcion
  Procedimientos
}

enum GoalObjective {
  Leads
  Agendados
  Asistidos
  CostoPorResultado @map("Costo por Resultado")
  VentasServicios @map("Ventas de Servicios")
  VentasProductos @map("Ventas de Productos")
  Recuperados
  ConversionLeads @map("Conversión de Leads")
  ROI
  Seguidores
  Visualizaciones
  Alcance
  Engagement
  CierreEvaluaciones @map("Cierre de Evaluaciones")
  AceptacionTratamientos @map("Aceptación de Tratamientos")
  EfectividadTratamientos @map("Efectividad de Tratamientos")
  SeguimientosCompletados @map("Seguimientos Completados")
  RotacionPersonal @map("Rotación de Personal")
  NivelStock @map("Nivel de Stock")
}

enum TipoPost {
  Reel
  Historia
  Carrusel
  Post
}

enum RedSocialPost {
  Facebook
  Instagram
  Tiktok
  YouTube
}

model Lead {
  id                     Int                      @id @default(autoincrement())
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  fechaLead              DateTime
  nombres                String
  apellidos              String
  numero                 String
  sexo                   String // 'M' | 'F'
  redSocial              String // Origen del lead (ej. Instagram, Facebook)
  anuncio                String // Nombre del anuncio o campaña
  vendedor               Seller
  estado                 LeadStatus               @default(Nuevo)
  montoPagado            Float                    @default(0)
  metodoPago             MetodoPago?
  fechaHoraAgenda        DateTime?
  servicios              String[]                 @default([])
  categoria              String
  fechaVolverLlamar      DateTime?
  horaVolverLlamar      String? // HH:mm
  notas                  String?
  nHistoria              String?                  @unique
  aceptoTratamiento      String? // 'Si' | 'No'
  motivoNoCierre         String?
  estadoRecepcion        ReceptionStatus?         @default(Agendado)
  recursoId              String?
  birthDate              DateTime?
  precioCita             Float?
  deudaCita              Float?
  metodoPagoDeuda        MetodoPago?
  documentType           DocumentType?
  documentNumber         String?
  razonSocial            String?
  direccionFiscal        String?

  registrosLlamada       RegistroLlamada[]
  tratamientos           Treatment[]
  procedimientos         Procedure[]
  seguimientos           Seguimiento[]
  alergias               Alergia[]
  membresiasAdquiridas   Membership[]             @relation("LeadToMembership")
  comprobantes           ComprobanteElectronico[]

  @@map("leads")
}

model RegistroLlamada {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  leadId          Int
  numeroLlamada   Int
  duracionLlamada String // HH:mm:ss
  estadoLlamada   EstadoLlamada
  observacion     String?

  lead            Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("registros_llamada")
}

model Treatment {
  id               Int        @id @default(autoincrement())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  leadId           Int
  nombre           String
  cantidadSesiones Int
  precio           Float
  montoPagado      Float
  metodoPago       MetodoPago?
  deuda            Float

  lead             Lead       @relation(fields: [leadId], references: [id], onDelete: Cascade)
  procedures       Procedure[] // Relación con Procedure
  
  @@map("tratamientos")
}

model Procedure {
  id                Int        @id @default(autoincrement())
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  leadId            Int
  fechaAtencion     DateTime
  personal          Personal
  horaInicio        String // HH:mm
  horaFin           String // HH:mm
  tratamientoId     Int // ID del Treatment al que pertenece
  nombreTratamiento String // Copia del nombre del tratamiento
  sesionNumero      Int
  asistenciaMedica  Boolean
  medico            Medico?
  observacion       String?

  lead              Lead       @relation(fields: [leadId], references: [id], onDelete: Cascade)
  treatment         Treatment  @relation(fields: [tratamientoId], references: [id]) // Relación con Treatment

  @@map("procedimientos")
}

model Seguimiento {
  id                 Int        @id @default(autoincrement())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  leadId             Int
  procedimientoId    Int
  nombreProcedimiento String
  fechaSeguimiento   DateTime
  personal           Personal
  inflamacion        Boolean
  ampollas           Boolean
  alergias           Boolean
  malestarGeneral    Boolean
  brote              Boolean
  dolorDeCabeza      Boolean
  moretones          Boolean
  observacion        String?

  lead               Lead       @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  @@map("seguimientos")
}

model Alergia {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  leadId    Int
  nombre    String
  gravedad  Int      @default(1) // 1-5

  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("alergias")
}

model Campaign {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  nombreAnuncio     String
  categoria         String // Se usa para relacionar con MetaCampaign por nombre
  alcance           Int
  resultados        Int
  costoPorResultado Float
  importeGastado    Float
  fecha             DateTime

  @@map("campaigns")
}

model MetaCampaign {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  nombre      String   @unique
  fechaInicio DateTime
  fechaFin    DateTime
  categoria   String

  @@map("meta_campaigns")
}

model Publicacion {
  id                    Int          @id @default(autoincrement())
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  fechaPost             DateTime
  horaPost              String? // HH:mm
  temaVideo             String
  tipoPost              TipoPost
  redSocial             RedSocialPost
  publicacionUrl        String
  imageUrl              String?
  vistas                Int          @default(0)
  comentarios           Int          @default(0)
  reacciones            Int          @default(0)
  conversacionesIniciadas Int          @default(0)
  convertidos           Int          @default(0)

  @@map("publicaciones")
}

model Seguidor {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  fecha          DateTime
  cuenta         String
  redSocial      RedSocialPost
  seguidores     Int          @default(0)
  dejaronDeSeguir Int          @default(0)

  @@map("seguidores")
}

model VentaExtra {
  id             Int                      @id @default(autoincrement())
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  codigoVenta    String                   @unique
  fechaVenta     DateTime
  pacienteId     Int // ID del Lead que es paciente
  nHistoria      String
  nombrePaciente String
  servicio       String
  categoria      String
  precio         Float
  montoPagado    Float
  metodoPago     MetodoPago
  deuda          Float
  fechaPagoDeuda DateTime?

  comprobantes   ComprobanteElectronico[]

  @@map("ventas_extra")
}

model Incidencia {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  fecha             DateTime
  hora              String // HH:mm
  pacienteId        Int // ID del Lead que es paciente
  nHistoria         String
  nombrePaciente    String
  tipoIncidencia    String
  detalleIncidencia String
  descripcion       String?
  solucionado       Boolean  @default(false)

  @@map("incidencias")
}

model ComprobanteItem {
  id                        Int                 @id @default(autoincrement())
  descripcion               String
  cantidad                  Int
  valorUnitario             Float
  precioUnitario            Float
  igv                       Float
  montoTotal                Float
  comprobanteElectronicoId  Int
  comprobanteElectronico    ComprobanteElectronico @relation(fields: [comprobanteElectronicoId], references: [id], onDelete: Cascade)

  @@map("comprobantes_items")
}

model ComprobanteElectronico {
  id                    Int                      @id @default(autoincrement())
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  tipoDocumento         TipoComprobanteElectronico
  serie                 String
  correlativo           Int
  fechaEmision          DateTime
  clienteTipoDocumento  DocumentType
  clienteNumeroDocumento String
  clienteDenominacion   String
  clienteDireccion      String?
  opGravadas            Float
  igv                   Float
  total                 Float
  sunatStatus           SunatStatus              @default(Pendiente)
  ventaType             String // 'lead' | 'venta_extra'

  // Relaciones explícitas y opcionales
  leadId                Int?
  lead                  Lead?                    @relation(fields: [leadId], references: [id], onDelete: SetNull)

  ventaExtraId          Int?
  ventaExtra            VentaExtra?              @relation(fields: [ventaExtraId], references: [id], onDelete: SetNull)

  items                 ComprobanteItem[]

  @@map("comprobantes_electronicos")
}

model Egreso {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  fechaRegistro  DateTime
  fechaPago      DateTime
  proveedor      String
  categoria      String // Nombre de la EgresoCategory
  descripcion    String
  tipoComprobante TipoComprobante
  serieComprobante String?
  nComprobante   String?
  montoTotal     Float
  montoPagado    Float
  deuda          Float
  modoPago       ModoPagoEgreso?
  fotoUrl        String?
  tipoMoneda     String        @default("Soles") // "Soles" | "Dólares"
  observaciones  String?

  @@map("egresos")
}

model TipoProveedor {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nombre    String   @unique

  proveedores Proveedor[]

  @@map("tipos_proveedor")
}

model Proveedor {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  razonSocial    String    @unique
  ruc            String    @unique
  tipo           String // Nombre del TipoProveedor
  numeroContacto String?

  tipoProveedorId Int?
  tipoProveedor   TipoProveedor? @relation(fields: [tipoProveedorId], references: [id], onDelete: SetNull)

  @@map("proveedores")
}

model BusinessInfo {
  id           Int      @id @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  nombre       String
  ruc          String
  direccion    String
  telefono     String
  email        String
  logoUrl      String?
  loginImageUrl String?

  @@map("business_info")
}

model ClientSource {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nombre    String   @unique

  @@map("client_sources")
}

model ServiceCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nombre    String   @unique

  services  Service[]

  @@map("service_categories")
}

model EgresoCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nombre    String   @unique

  @@map("egreso_categories")
}

model ProductCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nombre    String   @unique

  products  Product[]

  @@map("product_categories")
}

model JobPosition {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nombre    String   @unique

  users     User[]

  @@map("job_positions")
}

model Service {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  nombre       String
  categoria    String
  precio       Float

  serviceCategoryId Int?
  serviceCategory ServiceCategory? @relation(fields: [serviceCategoryId], references: [id], onDelete: SetNull)

  @@unique([nombre, categoria])
  @@map("services")
}

model Product {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  nombre          String
  categoria       String
  precio          Float

  productCategoryId Int?
  productCategory ProductCategory? @relation(fields: [productCategoryId], references: [id], onDelete: SetNull)

  @@unique([nombre, categoria])
  @@map("products")
}

model Membership {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  nombre           String   @unique
  precio           Float
  numeroSesiones   Int
  descripcion      String?

  leads            Lead[]   @relation("LeadToMembership")

  @@map("memberships")
}

model User {
  id                  Int                 @id @default(autoincrement())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  nombres             String
  apellidos           String
  usuario             String              @unique
  password            String
  rolId               Int
  avatarUrl           String?
  position            String?
  documentType        DocumentType?
  documentNumber      String?
  phone               String?
  birthDate           DateTime?
  startDate           DateTime?
  salary              Float?
  contractType        String? // 'Plazo Fijo' | 'Indefinido'
  maritalStatus       String? // 'Soltero(a)' | 'Casado(a)' | 'Divorciado(a)' | 'Viudo(a)'
  sex                 String? // 'M' | 'F'

  role                Role                @relation(fields: [rolId], references: [id])
  jobPositionId       Int?
  jobPosition         JobPosition?        @relation(fields: [jobPositionId], references: [id], onDelete: SetNull)

  addresses           Address[]
  emergencyContacts   EmergencyContact[]
  
  reconocimientosDados Reconocimiento[] @relation("ReconocimientoGiven")
  reconocimientosRecibidos Reconocimiento[] @relation("ReconocimientoReceived")

  @@map("users")
}

model Address {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  direccion   String
  distrito    String
  ciudad      String
  referencia  String?

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model EmergencyContact {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  nombre      String
  parentesco  String
  numero      String

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emergency_contacts")
}

model Reconocimiento {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  otorgadoPorId  Int
  otorgadoPorNombre String // Redundante para simplificar lectura
  recibidoPorId  Int
  mensaje        String
  fecha          DateTime

  otorgadoPor    User     @relation("ReconocimientoGiven", fields: [otorgadoPorId], references: [id])
  recibidoPor    User     @relation("ReconocimientoReceived", fields: [recibidoPorId], references: [id])

  @@map("reconocimientos")
}

model Goal {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  area        GoalArea
  objective   GoalObjective
  value       Float
  unit        GoalUnit
  personal    Personal? // Opcional, si la meta es para un individuo
  startDate   DateTime
  endDate     DateTime

  @@map("goals")
}
EOF

echo "El archivo schema.prisma ha sido actualizado."
echo "Ahora, **en la carpeta 'crm-backend'**, ejecuta los siguientes comandos:"
echo ""
echo "cd crm-backend"
echo "npx prisma migrate dev --name update_schema_for_addresses_etc"
echo "npx prisma generate"
echo "npm run build"
echo "Y finalmente, reinicia tu aplicación Node.js en cPanel para que los cambios surtan efecto."
